
 //Code 3--------Checking whether the coefficient gene=11 gives us the generic rank-----------------------------
 //--------------It also checks whether it is transversal to the deformation space obtained by 'DeformSpace'-----
LIB "foliation.lib";
int n=2; int d=7; int gene=11; int zb=10; //--a generic coefficient;  
ring r=(0,z), (x(1..n+1)),dp;
poly cp=cyclotomic(2*d); int degext=deg(cp) div deg(var(1));
cp=subst(cp, x(1),z); minpoly =number(cp);
int dhalf=d div 2; int i; int j; 
intvec mlist=d;  for (i=1;i<=n; i=i+1){mlist=mlist,d;}
list Periods; list lcycles; intvec besh; list pkom; list lMpij;
list ll; 
int d1; int d2; int m1; int m2; int s1; int s2; int a1; int a2; int count; 
int a_3; list check=list(), list(); intvec ro; list nottran; intvec cods;

for (d1=1;d1<=dhalf; d1=d1+1)
    {
    for (d2=d1;d2<=dhalf ; d2=d2+1)
        {
        for (m1=0;m1<=d1; m1=m1+1)
            {
            for (m2=0;m2<=d2; m2=m2+1)
                {
                if (m1==0){a1=1;}else{a1=m1;}
                if (m2==0){a2=1;}else{a2=m2;}
                for (s1=a1;s1<=dhalf ; s1=s1+1)
                    {
                    for (s2=a2;s2<=dhalf ; s2=s2+1)
                        {
                        count=count+1;
                        
                        ll=TwoCI(n,d,intvec(d1,d2),intvec(s1,s2),intvec(m1,m2));
                        lcycles=ll[1]; besh=ll[2];
                        Periods=list();
                        for (i=1; i<=size(lcycles); i=i+1)
                            {
                            Periods=insert(Periods, 
                            PeriodLinearCycle(mlist, lcycles[i][1], lcycles[i][2],par(1)), size(Periods));
                            }
                        pkom=list();          
                        for (i=1; i<=size(besh)-1; i=i+1)
                            { 
                            for (j=besh[i]+1; j<=besh[i+1]-1; j=j+1)
                                {  
                                Periods[besh[i]]=Periods[besh[i]]+Periods[j];
                                }
                            pkom=insert(pkom, Periods[besh[i]], size(pkom));     
                            }
                        Periods=pkom;
                        lMpij=list(); 
                        for (i=1; i<=size(Periods); i=i+1)
                            {
                            lMpij=insert(lMpij, Matrixpij(mlist, Periods[i]), size(lMpij));
                            }
                              
                              a_3=rank(lMpij[1]+gene*lMpij[2]);
                              for (i=2; i<=a_3+3; i=i+1)
                                  { if (a_3<>rank(lMpij[1]+ i*lMpij[2])){check[1]=insert(check[1], list(intvec(d1,d2), intvec(s1,s2),intvec(m1,m2)), size(check[1])); "generic failed"; }
                                  }
                            cods=rank(lMpij[1]), rank(lMpij[2]), a_3, rank(concat(transpose(lMpij[1]), transpose(lMpij[2])));     
                            ro=GoodMinor( concat(transpose(lMpij[1]), transpose(lMpij[2])) )[1];     
                               nottran=list(); 
                               for (i=1; i<=zb; i=i+1)
                                   {
                                   for (j=-zb; j<=zb; j=j+1)
                                     {
                                      if (gcd(i,j)==1)
                                      {
                                      if (a_3<>rank(submat(transpose( i*lMpij[1]+j*lMpij[2] ), ro, 1..nrows(lMpij[1] ))))
                                      { 
                                       //---"transversality failed";
                                       nottran=insert(nottran, intvec(i,j), size(nottran)); 
                                      }
                                      }
                                     }
                                   }
                            if (size(nottran)<>0)
                            {
                              check[2]=insert(check[2], list(intvec(d1,d2), intvec(s1,s2), intvec(m1,m2), cods, nottran), size(check[2]));    
                            }
                            count; 
                            
                              
                        
    }}}}}}
check[1];
check[2];
 
 
